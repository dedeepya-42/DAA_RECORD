{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPFoViYNBO15+FMCXjteBVa"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XwQUckDSw-K4","executionInfo":{"status":"ok","timestamp":1744474572140,"user_tz":-330,"elapsed":13,"user":{"displayName":"KANTE DEDEEPYA 11239A042","userId":"09322339443494854070"}},"outputId":"7797d3e2-6612-4f72-ac55-357b3e961d5f"},"outputs":[{"output_type":"stream","name":"stdout","text":["Move disk 1 from source  A  to destination  C\n","Move disk  2  from source  A  to destination  B\n","Move disk 1 from source  C  to destination  B\n","Move disk  3  from source  A  to destination  C\n","Move disk 1 from source  B  to destination  A\n","Move disk  2  from source  B  to destination  C\n","Move disk 1 from source  A  to destination  C\n","Move disk  4  from source  A  to destination  B\n","Move disk 1 from source  C  to destination  B\n","Move disk  2  from source  C  to destination  A\n","Move disk 1 from source  B  to destination  A\n","Move disk  3  from source  C  to destination  B\n","Move disk 1 from source  A  to destination  C\n","Move disk  2  from source  A  to destination  B\n","Move disk 1 from source  C  to destination  B\n"]}],"source":["def TowerOfHanoi(n , source, destination, auxiliary):\n","\tif n==1:\n","\t\tprint(\"Move disk 1 from source \",source,\" to destination \",destination)\n","\t\treturn\n","\tTowerOfHanoi(n-1, source, auxiliary, destination)\n","\tprint(\"Move disk \",n,\" from source \",source,\" to destination \",destination)\n","\tTowerOfHanoi(n-1, auxiliary, destination, source)\n","n = 4\n","TowerOfHanoi(n,'A','B','C')"]},{"cell_type":"code","source":["import sys\n","def totalCost(mask, pos, n, cost):\n","    if mask == (1 << n) - 1:\n","        return cost[pos][0]\n","    ans = sys.maxsize\n","    for i in range(n):\n","        if (mask & (1 << i)) == 0:\n","            ans = min(ans, cost[pos][i] +\n","                      totalCost(mask | (1 << i), i, n, cost))\n","    return ans\n","def tsp(cost):\n","    n = len(cost)\n","    return totalCost(1, 0, n, cost)\n","if __name__ == \"__main__\":\n","    cost = [\n","        [0, 10, 15, 20],\n","        [10, 0, 35, 25],\n","        [15, 35, 0, 30],\n","        [20, 25, 30, 0]\n","    ]\n","    result = tsp(cost)\n","    print(result)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WL0_AtzZ2a2n","executionInfo":{"status":"ok","timestamp":1744475637427,"user_tz":-330,"elapsed":12,"user":{"displayName":"KANTE DEDEEPYA 11239A042","userId":"09322339443494854070"}},"outputId":"494fbe0f-1cd1-4fce-b0f8-8cc811a2541d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["80\n"]}]},{"cell_type":"code","source":["class Item:\n","    def __init__(self, profit, weight):\n","        self.profit = profit\n","        self.weight = weight\n","def fractionalKnapsack(W, arr):\n","    arr.sort(key=lambda x: (x.profit / x.weight), reverse=True)\n","    finalvalue = 0.0\n","    for item in arr:\n","        if item.weight <= W:\n","            W -= item.weight\n","            finalvalue += item.profit\n","        else:\n","            finalvalue += item.profit * W / item.weight\n","            break\n","    return finalvalue\n","if __name__ == \"__main__\":\n","    W = 50\n","    arr = [Item(60, 10), Item(100, 20), Item(120, 30)]\n","    max_val = fractionalKnapsack(W, arr)\n","    print(max_val)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VXL_smua25T4","executionInfo":{"status":"ok","timestamp":1744475762065,"user_tz":-330,"elapsed":11,"user":{"displayName":"KANTE DEDEEPYA 11239A042","userId":"09322339443494854070"}},"outputId":"33481c23-e42f-4574-ea95-90537ac00f41"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["240.0\n"]}]},{"cell_type":"code","source":["import sys\n","def prim(n, edges):\n","    adj_list = {i: [] for i in range(n)}\n","    for u, v, weight in edges:\n","        adj_list[u].append((weight, v))\n","        adj_list[v].append((weight, u))\n","    mst = []\n","    visited = set()\n","    key = [sys.maxsize] * n\n","    parent = [-1] * n\n","    key[0] = 0\n","    for _ in range(n):\n","        u = min((i for i in range(n) if i not in visited), key=lambda x: key[x])\n","        visited.add(u)\n","        if parent[u] != -1:\n","            mst.append((parent[u], u, key[u]))\n","        for weight, v in adj_list[u]:\n","            if v not in visited and weight < key[v]:\n","                key[v] = weight\n","                parent[v] = u\n","    return mst, sum(key)\n","graph_edges = [\n","    (0, 1, 10), (0, 2, 6), (0, 3, 5),\n","    (1, 3, 15), (2, 3, 4)\n","]\n","nodes = 4\n","mst_edges, mst_weight = prim(nodes, graph_edges)\n","print(\"Minimum Spanning Tree Edges:\", mst_edges)\n","print(\"Total Weight of MST:\", mst_weight)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YIMUQamq3MUe","executionInfo":{"status":"ok","timestamp":1744475904639,"user_tz":-330,"elapsed":8,"user":{"displayName":"KANTE DEDEEPYA 11239A042","userId":"09322339443494854070"}},"outputId":"e1241386-01fa-4cf4-fccc-ec53c83eb656"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Minimum Spanning Tree Edges: [(0, 3, 5), (3, 2, 4), (0, 1, 10)]\n","Total Weight of MST: 19\n"]}]},{"cell_type":"code","source":["def firstFit(weight, n, c):\n","    res = 0\n","    bin_rem = [0] * n\n","    for i in range(n):\n","        j = 0\n","        while (j < res):\n","            if (bin_rem[j] >= weight[i]):\n","                bin_rem[j] = bin_rem[j] - weight[i]\n","                break\n","            j += 1\n","        if (j == res):\n","            bin_rem[res] = c - weight[i]\n","            res = res + 1\n","    return res\n","weight = [2, 5, 4, 7, 1, 3, 8]\n","c = 16\n","n = len(weight)\n","print(\"Number of bins required in First Fit : \", firstFit(weight, n, c))\n","def nextfit(weight, c):\n","    res = 0\n","    rem = c\n","    for _ in range(len(weight)):\n","        if rem >= weight[_]:\n","            rem = rem - weight[_]\n","        else:\n","            res += 1\n","            rem = c - weight[_]\n","    return res\n","weight = [2, 5, 4, 7, 1, 3, 8]\n","c = 10\n","print(\"Number of bins required in Next Fit :\", nextfit(weight, c))\n","def bestfit(weight, n, c):\n","    res = 0\n","    bin_rem = [0] * n\n","    for i in range(n):\n","        j = 0\n","        min = c + 1\n","        bi = 0\n","        for j in range(res):\n","            if (bin_rem[j] >= weight[i] and bin_rem[j] -\n","                    weight[i] < min):\n","                bi = j\n","                min = bin_rem[j] - weight[i]\n","        if (min == c + 1):\n","            bin_rem[res] = c - weight[i]\n","            res += 1\n","        else:\n","            bin_rem[bi] -= weight[i];\n","    return res\n","if __name__ == '__main__':\n","    weight = [2, 5, 4, 7, 1, 3, 8];\n","    c = 3\n","    n = len(weight)\n","    print(\"Number of bins required in best Fit : \",\n","          bestfit(weight, n, c))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uG0xGtb53mqo","executionInfo":{"status":"ok","timestamp":1744476076528,"user_tz":-330,"elapsed":79,"user":{"displayName":"KANTE DEDEEPYA 11239A042","userId":"09322339443494854070"}},"outputId":"340cc752-c2d3-41bc-efcb-510791387511"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Number of bins required in First Fit :  2\n","Number of bins required in Next Fit : 4\n","Number of bins required in best Fit :  6\n"]}]},{"cell_type":"code","source":["import random\n","import math\n","from itertools import permutations\n","def randomized_partition(arr, low, high):\n","    pivot_index = random.randint(low, high)\n","    arr[pivot_index], arr[high] = arr[high], arr[pivot_index]  # Swap with last element\n","    pivot = arr[high]\n","    i = low - 1\n","    for j in range(low, high):\n","        if arr[j] <= pivot:\n","            i += 1\n","            arr[i], arr[j] = arr[j], arr[i]\n","    arr[i + 1], arr[high] = arr[high], arr[i + 1]\n","    return i + 1\n","def randomized_quick_sort(arr, low, high):\n","    if low < high:\n","        pivot = randomized_partition(arr, low, high)\n","        randomized_quick_sort(arr, low, pivot - 1)\n","        randomized_quick_sort(arr, pivot + 1, high)\n","def quick_sort(arr):\n","    randomized_quick_sort(arr, 0, len(arr) - 1)\n","    return arr\n","def vertex_cover_approx(graph):\n","    cover = set()\n","    edges = set()\n","    for u in graph:\n","        for v in graph[u]:\n","            edges.add((u, v))\n","    while edges:\n","        u, v = edges.pop()\n","        cover.add(u)\n","        cover.add(v)\n","        edges = {e for e in edges if u not in e and v not in e}\n","    return cover\n","def tsp_dynamic_programming(graph):\n","    n = len(graph)\n","    dp = [[None] * (1 << n) for _ in range(n)]\n","    def tsp(mask, pos):\n","        if mask == (1 << n) - 1:\n","            return graph[pos][0]\n","        if dp[pos][mask] is not None:\n","            return dp[pos][mask]\n","        min_cost = float('inf')\n","        for city in range(n):\n","            if (mask & (1 << city)) == 0:\n","                cost = graph[pos][city] + tsp(mask | (1 << city), city)\n","                min_cost = min(min_cost, cost)\n","        dp[pos][mask] = min_cost\n","        return min_cost\n","    return tsp(1, 0)\n","graph = [\n","    [0, 10, 15, 20],\n","    [10, 0, 35, 25],\n","    [15, 35, 0, 30],\n","    [20, 25, 30, 0]\n","]\n","tsp_cost = tsp_dynamic_programming(graph)\n","print(\"Optimal TSP Cost using Dynamic Programming:\", tsp_cost)\n","arr = [10, 7, 8, 9, 1, 5]\n","sorted_arr = quick_sort(arr)\n","print(\"Sorted array:\", sorted_arr)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tq7B37TJFiWj","executionInfo":{"status":"ok","timestamp":1744546810216,"user_tz":-330,"elapsed":22,"user":{"displayName":"KANTE DEDEEPYA 11239A042","userId":"09322339443494854070"}},"outputId":"639f68a3-a52e-4705-c9f0-e2f471671781"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Optimal TSP Cost using Dynamic Programming: 80\n","Sorted array: [1, 5, 7, 8, 9, 10]\n"]}]},{"cell_type":"code","source":["def fibonacci(n):\n","    if n <= 0:\n","        return 0\n","    elif n == 1:\n","        return 1\n","    else:\n","        return fibonacci(n - 1) + fibonacci(n - 2)\n","n = 10\n","print(f\"The {n}th Fibonacci number is: {fibonacci(n)}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FQO2645GGA5d","executionInfo":{"status":"ok","timestamp":1744546929438,"user_tz":-330,"elapsed":75,"user":{"displayName":"KANTE DEDEEPYA 11239A042","userId":"09322339443494854070"}},"outputId":"0e27c407-eb55-4cb8-c283-13a439d4674b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["The 10th Fibonacci number is: 55\n"]}]},{"cell_type":"code","source":["def fibonacci_iterative(n):\n","    if n <= 0:\n","        return 0\n","    elif n == 1:\n","        return 1\n","\n","    a, b = 0, 1\n","    for _ in range(2, n + 1):\n","        a, b = b, a + b\n","    return b\n","\n","if __name__ == \"__main__\":\n","    n = int(input(\"Enter the number of terms (n): \"))\n","    print(f\"The {n}th Fibonacci number is: {fibonacci_iterative(n)}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YRBsBEPmGaax","executionInfo":{"status":"ok","timestamp":1744547000695,"user_tz":-330,"elapsed":10801,"user":{"displayName":"KANTE DEDEEPYA 11239A042","userId":"09322339443494854070"}},"outputId":"c493207a-1070-4977-95f5-2df3a8849205"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter the number of terms (n): 3\n","The 3th Fibonacci number is: 2\n"]}]},{"cell_type":"code","source":["class Item:\n","    def __init__(self, profit, weight):\n","        self.profit = profit\n","        self.weight = weight\n","def fractionalKnapsack(W, arr):\n","    arr.sort(key=lambda x: (x.profit / x.weight), reverse=True)\n","    finalvalue = 0.0\n","    for item in arr:\n","        if item.weight <= W:\n","            W -= item.weight\n","            finalvalue += item.profit\n","        else:\n","            finalvalue += item.profit * W / item.weight\n","            break\n","    return finalvalue\n","if __name__ == \"__main__\":\n","    W = 50\n","    arr = [Item(60, 10), Item(100, 20), Item(120, 30)]\n","    max_val = fractionalKnapsack(W, arr)\n","    print(max_val)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6M8HxioJavMM","executionInfo":{"status":"ok","timestamp":1745072385154,"user_tz":-330,"elapsed":16,"user":{"displayName":"KANTE DEDEEPYA 11239A042","userId":"09322339443494854070"}},"outputId":"e80a4084-83b6-4c65-be67-4ca7c2ca8b3e"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["240.0\n"]}]},{"cell_type":"code","source":["import heapq\n","\n","def dijkstra(graph, start):\n","    # Priority queue to hold (cost, node)\n","    pq = [(0, start)]\n","\n","    # Distance from start to node\n","    distances = {node: float('inf') for node in graph}\n","    distances[start] = 0\n","\n","    while pq:\n","        current_distance, current_node = heapq.heappop(pq)\n","\n","        # If this path is not better, skip\n","        if current_distance > distances[current_node]:\n","            continue\n","\n","        for neighbor, weight in graph[current_node]:\n","            distance = current_distance + weight\n","\n","            # Only consider this path if it's better\n","            if distance < distances[neighbor]:\n","                distances[neighbor] = distance\n","                heapq.heappush(pq, (distance, neighbor))\n","\n","    return distances\n","graph = {\n","    'A': [('B', 1), ('C', 4)],\n","    'B': [('C', 2), ('D', 5)],\n","    'C': [('D', 1)],\n","    'D': []\n","}\n","\n","start_node = 'A'\n","shortest_paths = dijkstra(graph, start_node)\n","print(shortest_paths)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TPz_o3Lrd4Nn","executionInfo":{"status":"ok","timestamp":1745073211340,"user_tz":-330,"elapsed":19,"user":{"displayName":"KANTE DEDEEPYA 11239A042","userId":"09322339443494854070"}},"outputId":"2626f799-54c0-49ae-ec5e-c471f1a906c3"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["{'A': 0, 'B': 1, 'C': 3, 'D': 4}\n"]}]},{"cell_type":"code","source":["from collections import deque, defaultdict\n","\n","def bfs(capacity, flow, source, sink, parent):\n","    visited = set()\n","    queue = deque([source])\n","    visited.add(source)\n","\n","    while queue:\n","        u = queue.popleft()\n","        for v in capacity[u]:\n","            # If not yet visited and residual capacity > 0\n","            if v not in visited and capacity[u][v] - flow[u][v] > 0:\n","                parent[v] = u\n","                visited.add(v)\n","                if v == sink:\n","                    return True\n","                queue.append(v)\n","    return False\n","\n","def edmonds_karp(graph, source, sink):\n","    capacity = defaultdict(lambda: defaultdict(int))\n","    flow = defaultdict(lambda: defaultdict(int))\n","\n","    # Build capacity from the graph\n","    for u in graph:\n","        for v, cap in graph[u]:\n","            capacity[u][v] += cap  # Handles parallel edges\n","            capacity[v]  # Ensure reverse edge exists in capacity map\n","\n","    max_flow = 0\n","    parent = {}\n","\n","    while bfs(capacity, flow, source, sink, parent := {}):\n","        # Find minimum residual capacity along the path found by BFS\n","        path_flow = float('inf')\n","        s = sink\n","        while s != source:\n","            path_flow = min(path_flow, capacity[parent[s]][s] - flow[parent[s]][s])\n","            s = parent[s]\n","\n","        # Update flow and reverse flow\n","        v = sink\n","        while v != source:\n","            u = parent[v]\n","            flow[u][v] += path_flow\n","            flow[v][u] -= path_flow\n","            v = u\n","\n","        max_flow += path_flow\n","\n","    return max_flow\n","graph = {\n","    'S': [('A', 10), ('C', 10)],\n","    'A': [('B', 4), ('C', 2), ('D', 8)],\n","    'B': [('T', 10)],\n","    'C': [('D', 9)],\n","    'D': [('B', 6), ('T', 10)],\n","    'T': []\n","}\n","\n","maxflow = edmonds_karp(graph, 'S', 'T')\n","print(\"Maximum flow:\", maxflow)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1zmubrn-eMke","executionInfo":{"status":"ok","timestamp":1745073277268,"user_tz":-330,"elapsed":28,"user":{"displayName":"KANTE DEDEEPYA 11239A042","userId":"09322339443494854070"}},"outputId":"e25cdba0-5d11-447b-aa0b-f29be77c1ed5"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["Maximum flow: 19\n"]}]},{"cell_type":"code","source":["def approx_vertex_cover(graph):\n","    visited = set()\n","    cover = set()\n","\n","    for u in graph:\n","        for v in graph[u]:\n","            if u not in visited and v not in visited:\n","                cover.add(u)\n","                cover.add(v)\n","                visited.add(u)\n","                visited.add(v)\n","    return cover\n","graph = {\n","    1: [2, 3],\n","    2: [1, 4],\n","    3: [1],\n","    4: [2]\n","}\n","\n","print(\"Vertex Cover:\", approx_vertex_cover(graph))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2rSFCOnXeRJX","executionInfo":{"status":"ok","timestamp":1745073319341,"user_tz":-330,"elapsed":14,"user":{"displayName":"KANTE DEDEEPYA 11239A042","userId":"09322339443494854070"}},"outputId":"dafc2f11-8a33-435d-80da-2f3b1c6f1f4b"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["Vertex Cover: {1, 2}\n"]}]},{"cell_type":"code","source":["import random\n","\n","def randomized_partition(arr, low, high):\n","    # Choose a random pivot and swap with the last element\n","    pivot_index = random.randint(low, high)\n","    arr[pivot_index], arr[high] = arr[high], arr[pivot_index]\n","\n","    # Standard partitioning\n","    pivot = arr[high]\n","    i = low - 1\n","    for j in range(low, high):\n","        if arr[j] <= pivot:\n","            i += 1\n","            arr[i], arr[j] = arr[j], arr[i]\n","    arr[i+1], arr[high] = arr[high], arr[i+1]\n","    return i + 1\n","\n","def randomized_quicksort(arr, low, high):\n","    if low < high:\n","        pi = randomized_partition(arr, low, high)\n","        randomized_quicksort(arr, low, pi - 1)\n","        randomized_quicksort(arr, pi + 1, high)\n","\n","# Example usage\n","arr = [10, 7, 8, 9, 1, 5]\n","randomized_quicksort(arr, 0, len(arr) - 1)\n","print(\"Sorted array:\", arr)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CPqKCAZ6ebXH","executionInfo":{"status":"ok","timestamp":1745073374703,"user_tz":-330,"elapsed":54,"user":{"displayName":"KANTE DEDEEPYA 11239A042","userId":"09322339443494854070"}},"outputId":"6c96d55a-776c-4017-ed04-3822c0c840e2"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stdout","text":["Sorted array: [1, 5, 7, 8, 9, 10]\n"]}]}]}